import org.apache.commons.csv.CSVParser
import org.apache.commons.csv.CSVFormat
import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
		classpath group: 'org.apache.commons', name: 'commons-csv', version: '1.0'
    }
}

apply plugin: 'base'
apply plugin: 'jetty'

ext{
	default_env = 'dev'
	
	local_info_url = 'info.html'
	local_apply_url = '//www.semsnycdoe.com/parentsite'
	local_geoclient_url = '//maps.nyc.gov/geoclient/v1/search.json?app_key=572204D6172746961&app_id=citymap-gis&input='
	local_basemap_urls = '["//maps.nyc.gov/gis/data/tiles/basic/", "//maps1.nyc.gov/gis/data/tiles/basic/", "//maps2.nyc.gov/gis/data/tiles/basic/", "//maps3.nyc.gov/gis/data/tiles/basic/"]'
	local_date_rules = 'date_rules.js'
	
	dev_info_url = 'info.html' //TODO is there a dev url
	dev_apply_url = '//www.semsnycdoe.com/parentsite' //TODO is there a dev url
	dev_geoclient_url = '//csgis-dev-web.csc.nycnet/geoclient/v1/search.json?app_key=572204D6172746961&app_id=citymap-gis&input='
	dev_basemap_urls = '["//csgis-dev-web.csc.nycnet/gis/data/tiles/basic/"]'
	dev_date_rules = 'date_rules.js'

	// stg_info_url = '//nycenetstg.nycenet.edu/schoolsearch/info.html' //TODO make the switch from apply to info for clarity
	stg_info_url = '//nycenetstg.nycenet.edu/schoolsearch/apply.html'
	stg_apply_url = '//www.semsnycdoe.com/parentsite' //TODO is there a stg url
	stg_geoclient_url = '//csgis-stg-prx.csc.nycnet/geoclient/v1/search.json?app_key=572204D6172746961&app_id=citymap-gis&input='
	stg_basemap_urls = '["//csgis-stg-prx.csc.nycnet/gis/data/tiles/basic/"]'
	//stg_date_rules = '//schoolsstg.nycenet.edu/schoolsearch/date_rules.js' //TODO make the switch to get rules from DOE
	stg_date_rules = 'date_rules.js'
	
	prd_info_url = '//www.nycenet.edu/schoolsearch/info.html'
	prd_apply_url = '//www.semsnycdoe.com/parentsite'
	prd_geoclient_url = '//maps.nyc.gov/geoclient/v1/search.json?app_key=572204D6172746961&app_id=citymap-gis&input='
	prd_basemap_urls = '["//maps.nyc.gov/gis/data/tiles/basic/", "//maps1.nyc.gov/gis/data/tiles/basic/", "//maps2.nyc.gov/gis/data/tiles/basic/", "//maps3.nyc.gov/gis/data/tiles/basic/"]'
	prd_date_rules = '//www.nycenet.edu/schoolsearch/date_rules.js'

	csvFileIn = 'etc/upk_test.csv'
	csvOutColumns = ['X', 'Y', 'PREK_TYPE', 'NAME', 'NOTE', 'ADDRESS', 'BOROUGH', 'ZIP', 'PHONE', 'EMAIL', 'WEBSITE', 
			'DAY_LENGTH', 'SEATS', 'MEALS', 'INDOOR_OUTDOOR', 'EXTENDED_DAY', 'SEMS_CODE']
	csvSchoolReplace = 'etc/school_replace.csv'
	csvAddressReplace = 'etc/address_replace.csv'
		
}

task copyFiles << {
	def build = new File('build/webapp')
	build.mkdirs()
	copy {
		from 'src/main/webapp'
		into 'build/webapp' 
	}
}

task buildApp(dependsOn: [clean, copyFiles]) << {
	def env = project.hasProperty('env') ? env : default_env
	def infoUrl = project.ext["${env}_info_url"];
	def applyUrl = project.ext["${env}_apply_url"];
	def geoUrl = project.ext["${env}_geoclient_url"];
	def baseUrls = project.ext["${env}_basemap_urls"];
	def dateRules = project.ext["${env}_date_rules"];

 	println "\nbuilding for env=${env}...\n"
 	println "INFO_URL=${infoUrl}"
 	println "APPLY_URL=${applyUrl}" 
 	println "GEOCLIENT_URL=${geoUrl}"
 	println "BASEMAP_URLS=${baseUrls}\n"
 	
	ant.taskdef(name: 'replace', classname: 'org.apache.tools.ant.taskdefs.Replace')	
	ant.replace(file: 'build/webapp/js/nyc/constants.js', token: local_info_url, value: infoUrl)
	ant.replace(file: 'build/webapp/js/nyc/constants.js', token: local_apply_url, value: applyUrl)
	ant.replace(file: 'build/webapp/js/nyc/constants.js', token: local_geoclient_url, value: geoUrl)
	ant.replace(file: 'build/webapp/js/nyc/constants.js', token: local_basemap_urls, value: baseUrls)
	ant.replace(file: 'build/webapp/index.html', token: local_date_rules, value: dateRules)
}

jettyRun {
	webAppSourceDirectory file('./')
	contextPath ''
	httpPort 8088
	stopPort 8090
	stopKey 'stopKey'
	reload 'automatic'
	scanIntervalSeconds 2
}

jettyStop {
	stopPort 8090
	stopKey 'stopKey'
}

task wrapper(type: Wrapper) {
    gradleVersion '2.3'
}

task cleanCsv << {
	println "\nparsing ${csvFileIn} file...\n"
	CSVParser parser = CSVParser.parse(new File(csvFileIn).getText(), CSVFormat.EXCEL);		
	def build = new File('build/webapp')
	def schoolReplace = CSVParser.parse(new File(csvSchoolReplace).getText(), CSVFormat.EXCEL).getRecords()
	build.mkdirs()
	def csvFileOut = file('build/webapp/upk.csv')
	def first = true
	def inColumns
	def id = 0
	csvFileOut.append(csvOutColumns.join(',') + '\n')
	for(inRecord in parser.getRecords()) {
		if (first){
			first = false
			inColumns = inRecord
		}else{
			def i = 0
			def newRecord = new ArrayList(csvOutColumns.size());
			for (def inColIndex = 0; inColIndex < inColumns.size(); inColIndex++){
				def outCol = inColumns[inColIndex]
				def outColIndex = csvOutColumns.indexOf(outCol)
				if (outColIndex > -1){
					def newValue = inRecord[inColIndex]
					if (!newValue.isNumber()){
						if (outCol == "ADDRESS"){
							newValue = Address.format(newValue, []);
						}else if (outCol == "NAME"){
							newValue = School.format(newValue, schoolReplace);
						}else if (outCol == "PHONE"){
							newValue = Phone.format(newValue);
						}
						newValue = '"' + newValue + '"'					
					}
					newRecord[outColIndex] = newValue 
				}
			}
			csvFileOut.append(newRecord.join(',') + '\n')
		}
		id++
	}
}

task testMe << { //TODO proper testing as part of plugin
	def schoolReplace = CSVParser.parse(new File(csvSchoolReplace).getText(), CSVFormat.EXCEL).getRecords()
	//def addressReplace = CSVParser.parse(new File(csvAddressReplace).getText(), CSVFormat.EXCEL).getRecords()	
	
	println '' 
	println 'before format = 1 (718) 123.4567.x123' 
	println 'after format = ' + Phone.format('1 (718) 123-4567 x123')
	println Phone.format('1 (718) 123-4567 x123') == '718-123-4567 x123' ? 'SUCCESS' : 'FAIL'
	println '' 	
	println Phone.format('(718)123-4567 x123')
	println 'before format = (718)123-4567 x123' 
	println 'after format = ' + Phone.format('1 (718) 123-4567 x123')
	println Phone.format('(718)123-4567 x123') == '718-123-4567 x123' ? 'SUCCESS' : 'FAIL'
	println '' 	
	println 'before format = PS./MS Bedford STUYVESANT EARLY CHILDHOOD development Center'
	println School.format('PS./MS Bedford STUYVESANT EARLY CHILDHOOD development Center', schoolReplace)
	println 'after format = ' + Phone.format('1 (718) 123-4567 x123')
	println School.format('PS./MS Bedford STUYVESANT EARLY CHILDHOOD development Center', schoolReplace) == 'P.S. / M.S. Bedford Stuyvesant ECDC' ? 'SUCCESS' : 'FAIL'
}

//TODO create a plugin for cleaning up the CSV

class Phone { //TOD0 parse input with no spearators 
	static String format(String phone) {
		if (phone == null || phone.trim() == '') return ''
		phone = phone.replaceAll('\\(', ' ')
		phone = phone.replaceAll('\\)', ' ')
		phone = phone.replaceAll('\\-', ' ')
		phone = phone.replaceAll('  ', ' ')
		phone = phone.replaceAll('\\.', ' ')
		def parts = phone.split(' ')
		def formatted = ''
		for (part in parts) {
			part = part.trim()
			if (part.length() > 0 && part != '1'){
				def sep = formatted.split('-').length < 4 ? '-' : ' '
				formatted = formatted + sep + part
			}
		}
		return formatted.substring(1)
	}
}

class Capitalize {
	static String capitalize(String s) {
		def capitalize = ''
		def words = s.split(' ')
		for (word in words){
			def letter1 = ''
			def theRest = ''
			def len = word.length()
			if (len > 0){
				letter1 = word.substring(0, 1).toUpperCase()
				if (len > 1){
					theRest = word.substring(1).toLowerCase()
				}
			}
			capitalize = capitalize + ' ' + letter1 + theRest 
		}
		return capitalize.trim()
	}
}

class Address extends Capitalize {
	static String format(String address, List addressReplace) { 
		address = this.capitalize(address.replace('.', '').trim())
		for (replacementPair in addressReplace) {
			String search = replacementPair[0]
			String replace = replacementPair[1] != null ? replacementPair[1] : ''
			address = address.replaceAll(search, replace)
		}
		return address
	}
}

class School extends Capitalize {
	static String format(String school, List schoolReplace) {
		school = school.replace('/', ' / ')
		school = this.capitalize(school.replace('.', '').trim())
		for (replacementPair in schoolReplace) {
			String search = replacementPair[0]
			String replace = replacementPair[1] != null ? replacementPair[1] : ''
			school = school.replaceAll(search, replace)
		}
		return school
	}
}


